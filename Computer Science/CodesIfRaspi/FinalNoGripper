
#include<SPI.h>
#include<Pixy.h>
#include<Servo.h>
#include <Stepper.h>

//Analyszer-FeedBack Function
int TZ1BallNum=0;
int TZ2BallNum=0;
int TZ3BallNum=0;


// Sharp - IR Module
#define sharpIR A3
float distance, volts, average = 0;
String final_value;
int count = 0;
const byte ballPi=12;

int ballVolt=0;



//Stepper Module
const int stepsPerRevolution = 200;  // change this to fit the number of steps per revolution
Stepper myStepper(stepsPerRevolution, 8, 9, 10, 11);  // PINS not fixed yet
int ang=360;
int angle=map(ang,0,360,0,200);
int step_iterator;
int revLutions=3;
byte TZ1State=0;
byte TZ2State=0;





// RASPI and camera


const byte Raspi=8;
bool MagentaSwitch=false;
bool IsMagenta=false;
bool IsGreen=false;
bool IsGolden=false;
//bool TZ1or2=false;

byte BallColor=0;




//*  Pneumaic 1 --> m1 and m2
//   Pneumatic 2 --> m3 and m4 
const byte m1=4;  
const byte m2=7;
const byte m3=2;
const byte m4=8;







// Junction from LineFollowing
const byte stop_pin=32; // Junction acknowledgement pin from Line following 
byte stoppin=0;            // Junction acknowledgement



// Throw to Linefollowing
const byte ackPin=24;  // Throw Acknowledgement to Line following
byte ack=0;



// Color to Line following
int lsbPin = 25;      //LSB pin of pixy to Linefollowing 
int msbPin = 34;      //MSB pin of pixy to line following
int throwZone=0;


int Zone(); // function to decide which zone to go to
void Send(int n);//sends which zone is selected to the line Following


void setup()
{
      Serial.begin(9600);
      myStepper.setSpeed(100);
      
      pinMode(ballPi, OUTPUT);     
      pinMode(m1,OUTPUT);
      pinMode(m2,OUTPUT);
      pinMode(m3,OUTPUT);
      pinMode(m4,OUTPUT);
      pinMode(lsbPin,OUTPUT);
      pinMode(msbPin,OUTPUT);
      pinMode(ackPin,OUTPUT);
      pinMode(stop_pin,INPUT);
      pinMode(Raspi,INPUT);
      pinMode(sharpIR, INPUT);


      digitalWrite(m1,LOW);
      digitalWrite(m2,LOW);
      digitalWrite(m3,LOW);
      digitalWrite(m4,LOW); 
    
}

void loop()
{
  
  ballSending();
  readPins();
  shoot();
  readPins(); 
}
  
  



void shoot()
{
  stoppin=0;
    if(throwZone==1||throwZone==2)
    {
      shootBall(m3,m4);
      reload(m3,m4);
    }
    else if(throwZone==3)
    {
      shootBall(m1,m2);
      reload(m1,m2);
    }
    
     sendAck();
     resetPin();
}  

void ballSending()
{
 
  readBall();
  sendZone(throwZone);
      
}


void readPins(){
  while(true){
  stoppin=digitalRead(stop_pin);
  if(stoppin==1){
    break;
  }
  
}
}


void readBall(){

  
  GetIrReading();
  if(final_value=="TZ3")
  {
    IsGolden=true;
  }
  else if(final_value=="TZ1 or TZ2")
  {
      SendCamera();
      delay(1000);
      readPi();
  }
  throwZone=Zone();
  
}


int Zone()
{
 //     IsGreen=digitalRead(Raspi);
      if(IsGreen)
      {
        if(MagentaSwitch) // if magenta has already been given
        {
          return 2; // go to zone 2 with this green ball
        }
        else
      {
        return 1; // otherwise go to zone 1
      }
      }
      else if(IsMagenta) // when magenta ball is passed,
      {
        MagentaSwitch=true; // make isMagenta as true and,
        return 2;       // select to go to zone 2
      }
       else if (IsGolden)
      {
        return 3;
      }
  
}
void shootBall(const byte x,const byte y)
{
  
  digitalWrite(x,HIGH);
  digitalWrite(y,LOW);
 
}
void reload(const byte x,const byte y)
{
  digitalWrite(x,LOW);
  digitalWrite(y,HIGH);
 
}
void standby(const byte x, const byte y)
{
  digitalWrite(x,LOW);
  digitalWrite(y,LOW);
  
}
void sendZone(int throwzone){
  if(throwzone==1)
  {
    digitalWrite(lsbPin,HIGH);
    digitalWrite(msbPin,LOW);
    if(TZ1State==0)
    clockwise();
  }
  else if(throwzone==2)
  {
    digitalWrite(lsbPin,LOW);
    digitalWrite(msbPin,HIGH);
    if(TZ2State==0)
    anti();
  }
  else if(throwzone==3)
  {
    digitalWrite(lsbPin,HIGH);
    digitalWrite(msbPin,HIGH);
  }
  
}

void sendAck()
{
  digitalWrite(ackPin,HIGH);
}

void resetPin()
{
  digitalWrite(lsbPin,LOW);
  digitalWrite(msbPin,LOW);
  digitalWrite(ackPin,LOW);
}

int clockwise()
{
  for(step_iterator=0;step_iterator<revLutions;step_iterator++)
  {
    Serial.println("clockwise");
    myStepper.step(-angle);    
  }
  TZ1State=1;  
}

int anti()
{
  for(step_iterator=0;step_iterator<revLutions;step_iterator++)
  {
    Serial.println("anticlockwise");
    myStepper.step(angle);
  }
  TZ2State=1;
}

void readDistance(){
  
      volts = analogRead(sharpIR)*0.0048828125;
      distance = 13*pow(volts, -1);

  
}

void CalculateAvg(){
    for (int i = 0; i < 1000; i++) {
    if (count == 0)
    average = distance;
    else {
      average = (average*count + distance)/(count++);
    }
  }
    
}

void IRBallSense(){
    for (int i = 0; i < 50; i++) {
    if (average > 4.9 && average < 5.5)
    final_value = "TZ1 or TZ2";
    else if (average > 6.2 && average < 7.5)
    final_value = "TZ3";
    else if (average > 7.5)
    final_value = "No Ball";
  }

}
void GetIrReading(){
   readDistance();
   CalculateAvg();
   IRBallSense(); 
}
  

void SendCamera(){
  if (final_value == "TZ1 or TZ2")
  {
    analogWrite(10, 165);
    delay(200);
   }
  analogWrite(10,0);
    
}

void readPi()
{
  ballVolt=analogRead(Raspi);
  if(ballVolt>630)
  {
    IsGreen=true;
  }
  else
  {
    IsMagenta=true;
    }
  
}
